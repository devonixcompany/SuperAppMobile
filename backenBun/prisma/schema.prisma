generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  firebaseUid   String        @unique
  email         String        @unique
  phoneNumber   String        @unique
  fullName      String?
  password      String
  status        String        @default("PENDING")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  typeUser      UserType?
  refresh_token String?
  chargePoints  ChargePoint[] @relation("UserChargePoints")
  transactions  Transaction[]
  vehicles      UserVehicle[]
}

model UserVehicle {
  id           String        @id @default(cuid())
  userId       String
  licensePlate String        @unique
  make         String?
  model        String?
  type         VehicleType   @default(ELECTRIC)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_vehicles")
}

model ChargePoint {
  id             String            @id
  name           String
  location       String
  latitude       Decimal?
  longitude      Decimal?
  protocol       OCPPVersion
  status         ChargePointStatus @default(AVAILABLE)
  maxPower       Float?
  connectorCount Int               @default(1)
  ownerId        String?
  ownershipType  OwnershipType     @default(PUBLIC)
  isPublic       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  owner          User?             @relation("UserChargePoints", fields: [ownerId], references: [id])
  sessions       ChargingSession[]
  connectors     Connector[]
  transactions   Transaction[]

  @@map("charge_points")
}

model Connector {
  id            String            @id @default(cuid())
  chargePointId String
  connectorId   Int
  type          ConnectorType     @default(TYPE_2)
  status        ConnectorStatus   @default(AVAILABLE)
  maxPower      Float?
  maxCurrent    Float?
  sessions      ChargingSession[]
  chargePoint   ChargePoint       @relation(fields: [chargePointId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  @@unique([chargePointId, connectorId])
  @@map("connectors")
}

model Transaction {
  id              String            @id @default(cuid())
  transactionId   String            @unique
  userId          String
  vehicleId       String?
  chargePointId   String
  connectorId     String
  startTime       DateTime
  endTime         DateTime?
  startMeterValue Float             @default(0)
  endMeterValue   Float?
  totalEnergy     Float?
  totalCost       Float?
  status          TransactionStatus @default(ACTIVE)
  stopReason      String?
  meterValues     MeterValue[]
  chargePoint     ChargePoint       @relation(fields: [chargePointId], references: [id])
  connector       Connector         @relation(fields: [connectorId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  vehicle         UserVehicle?      @relation(fields: [vehicleId], references: [id])

  @@map("transactions")
}

model MeterValue {
  id            String      @id @default(cuid())
  transactionId String
  timestamp     DateTime
  value         Float
  power         Float?
  current       Float?
  voltage       Float?
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("meter_values")
}

model ChargingSession {
  id            String        @id @default(cuid())
  sessionId     String        @unique
  chargePointId String
  connectorId   String
  userId        String?
  status        SessionStatus @default(ACTIVE)
  startTime     DateTime      @default(now())
  endTime       DateTime?
  lastActivity  DateTime      @default(now())
  chargePoint   ChargePoint   @relation(fields: [chargePointId], references: [id])
  connector     Connector     @relation(fields: [connectorId], references: [id])

  @@map("charging_sessions")
}

model Reservation {
  id            String            @id @default(cuid())
  userId        String
  chargePointId String
  connectorId   String?
  startTime     DateTime
  endTime       DateTime
  status        ReservationStatus @default(ACTIVE)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("reservations")
}

model ChargingProfile {
  id               String    @id @default(cuid())
  chargePointId    String?
  connectorId      String?
  name             String
  description      String?
  chargingRateUnit RateUnit  @default(A)
  chargingSchedule Json
  stackLevel       Int       @default(1)
  validFrom        DateTime?
  validTo          DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("charging_profiles")
}

model OCPPMessage {
  id            String           @id @default(cuid())
  messageId     String
  chargePointId String
  direction     MessageDirection
  action        String
  payload       Json
  timestamp     DateTime         @default(now())

  @@map("ocpp_messages")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String?
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  EXPIRED
}

enum VehicleType {
  ELECTRIC
  HYBRID
  PLUGIN_HYBRID
}

enum OwnershipType {
  PUBLIC
  PRIVATE
  SHARED
}

enum OCPPVersion {
  OCPP16
  OCPP20
  OCPP21
}

enum ChargePointStatus {
  AVAILABLE
  OCCUPIED
  UNAVAILABLE
  FAULTED
  MAINTENANCE
}

enum ConnectorType {
  TYPE_1
  TYPE_2
  CHADEMO
  CCS_COMBO_1
  CCS_COMBO_2
  TESLA
  GB_T
}

enum ConnectorStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  UNAVAILABLE
  FAULTED
}

enum TransactionStatus {
  ACTIVE
  COMPLETED
  FAILED
  CANCELED
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  FAILED
  TIMEOUT
}

enum ReservationStatus {
  ACTIVE
  COMPLETED
  CANCELED
  EXPIRED
}

enum RateUnit {
  A
  W
  kW
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum NotificationType {
  CHARGING_STARTEDChargePoint
  CHARGING_STOPPED
  CHARGING_COMPLETED
  PAYMENT_REQUIRED
  SYSTEM_MAINTENANCE
  GENERAL
}

enum UserType {
  NORMAL
  BUSINESS
}
